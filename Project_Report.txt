Parallel and Distributed Computing 
Section W03 Fall Semester 2024
Group 5
Members:
Ashton Mahatoo, Nicholas Hodge, Colson Sims, Giovanni Zavala, 
Joshua Smith, Mike Tokura, Carinne Tzurdecker, Courtney Faulkner

Project Part 1


*******Program Description:*******

(SThread,java)

We created an SThread class that extends the original Thread class and includes 5 private variables:
(Object [][] RTable;) is used to define the routing table.
(PrintWriter out, outTo;) serves as writer variables for writing back to the machine and to destination)
(BufferedReader in;) is the reader variable to read from where the machine is connected to
(String inputLine, outputLine, destination, addr;) are communication string variables
(Socket outSocket;)  are socket variables used for communicating with a destination 
(int ind;) is the indext in the routing table

A constructor is then created to initialize the SThread with respect to the Object [][] Table, Socket toClient, and int index variables, while also throwing an IO Exception in case the program cannot read the correct file. 

A “run” method is created for the thread to operate each machine connected to the server router. The way it works is by initially recording the writing destination and displaying a message showing the data is being forwarded to said specific destination before the connection is successful. As each thread is being created, they are put to sleep for 10 seconds each using the “Thread.currentThread().sleep(10000)” method, ensuring the routing table is fully complete with all of the machine's information. Additionally, two loops are created; the first loop traverses through the routing table to find the destination effectively with respect to the socket information (once the destination is found, a new print writer is assigned), and the second loop is a communication loop that is meant to pass the input from the machine to the output string for the destination and will throw an IO exception if the program is unable to identify the socket information.

(TCPClient.java)
The main method of the TCPClient file initially consists of 7 variables that are important for the connection and communication process:
(Socket Socket = null;) is the socket variable used to connect with ServerRouter
(PrintWriter out = null;) is used for writing to the ServerRouter
(BufferedReader in = null;) will be used to read from the ServerRouter
(InetAddress addr = InetAddress.getLocalHost();)
(String host = addr.getHostAddress(); this will contain the address of the client’s machine)
(String routerName = "j263-08.cse1.spsu.edu"); This is the specific name of the ServerRouter host name
(int SockNum = 5555;) This is the port number that will be utilized for the communication process.
We created a try-and (two) catch method to ensure the router information and I/O connection are correct; otherwise, either exception will be thrown.
With regards to message passing, we declared variables that are meant to support a communication loop that will continue to run so long as the program continues to process the specific information from the server.
Reader reader = new FileReader("file.txt"); // This line obtains the file information according to the specific file name 
BufferedReader fromFile =  new BufferedReader(reader); //this line allows the program to read the information from the string file.
String fromServer; // this string value will contain messages received from ServerRouter
String fromUser; // this variable represents the messages that are sent to the ServerRouter
String address ="10.5.2.109"; // This is the destination IP (Server) address value
out.println(address); // this will display the initial send (IP of the destination Server)
fromServer = in.readLine();// this is the initial receive from router (verification of connection)
System.out.println("ServerRouter: " + fromServer);
out.println(host); // Client sends the IP of its machine as initial send

(TCPServer.java)
The main method of the TCP Server consists of  7 important connection and communication variables: 
Socket Socket = null; // This initializes a socket that will connect with the ServerRouter
PrintWriter out = null; // this variable initializes the writing process fo the ServerRouter
BufferedReader in = null; // for reading from the ServerRouter
InetAddress addr = InetAddress.getLocalHost();
String host = addr.getHostAddress(); // This variable obtains the Server machine's IP address			
String routerName = "j263-08.cse1.spsu.edu"; //This is the  ServerRouter host name we will use
int SockNum = 5555; // this is the port number we plan to use

As with the TCPClient, we will also implement try-catch methods to ensure the router and I/O information is acceptable.
We plan to use these variables for the passing of the messages:
String fromServer; // messages that will be sent to the ServerRouter
String fromClient; // messages that are received from the ServerRouter      
String address ="10.5.3.196"; // destination IP (Client)
For the communications process, we included a print statement that displays the IP of the destination client and a readLine statement that serves as the initial receive from the router for verification purposes. Our communication while loop is designed to read the input received from the client with respect to the server router information and convert the messages to an uppercase format when complete, additionally sending the converted messages back to the client using the ServerRouter.


(TCPServerRouter.java)
The main method of the TCPServerRouter file contains 5 initialized variables for the initialized threads:
Socket clientSocket = null; // this is the initialized socket variable for the thread
Object [][] RoutingTable = new Object [10][2]; // we initialized routing table with the respective IP address and communication socket values
int SockNum = 5555; // port number
Boolean Running = true;
int ind = 0; // indext in the routing table
Our try-and-catch methods ensure that the ServerRouter can connect the threads successfully. Additionally, we created a while loop that creates new threads with each accepted connection based on the RoutingTable and clientSocket data.
Each created thread will contain random port values, with the index incrementing each time. 
